% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/createPCData_final.R
\name{createPCData}
\alias{createPCData}
\title{Create the information for running models}
\usage{
createPCData(structureObj, covariates, covariateTypes, covariateLevels,
  trimData = FALSE)
}
\arguments{
\item{structureObj}{An object of class \code{structureList}.  This object is the
result of using the \code{\link{chooseStructures}} function.}

\item{covariates}{A concatenated character string specifying the covariates for
which modeling information will be generated.  Not all covariates have to be
included in the model that will be fit, so it is a good idea to include all
covariates that may be of interest.}

\item{covariateTypes}{A concatenated character string specifying the type of
variable for each covariate given in the covariates argument.  The three options
are "binary", "continuous", and "categorical".  Every variable in the covariates
argument must have a corresponding covariate type, where the nth covariate type
corresponds to the nth covariate in the covariates argument.}

\item{covariateLevels}{A concatenated character string specifying the level at
which each covariates exists.  The options are "subject", "sample", and
"raster".  As an example, for a study examining differences between tumor and
non-tumor samples, the level would be 'sample' since the covariate changes
between samples.  A level must be provided for every covariate given in the
argument covariates.}

\item{trimData}{A TRUE/FALSE argument specifying whether or not the data
should be trimmed.  If trimData=TRUE, the data will be subset to only include
the variables required to fit a model.}
}
\value{
A list containing the model and other information supplied to the
\code{createPCData} function.

\describe{
  \item{\code{data}}{A data frame containing the data}
  \item{\code{nSubjs}}{The number of subjects}
  \item{\code{nSamps}}{The number of samples}
  \item{\code{cNSampsPerSubj}}{A cumulative vector of the number of samples
  per subject.  If no subject variable was provided to the rScale function
  then this will be NULL.}
  \item{\code{cNRastPerSamp}}{A cumulative vector of the number of rasters
  per sample.}
  \item{\code{totalRasters}}{A numeric value for the total number of
  rasters.}
  \item{\code{covs}}{A list of lists of covariate information.  For each
  variable in the covariates argument, a list of covariate information is
  created that includes elements \code{covariate} (the name of covariate),
  \code{type} (the type of covariate given in the covariateTypes argument),
  \code{level} (the level of the covariate given in the covariateLevels
  argument), \code{info} (the data corresponding to the covariate, given as
  data frames for subject-level and sample-level covariates and vectors for
  raster-level covariates), and \code{mapping} (a data frame mapping the
  given covariate values to new ones that are used in modeling).}
  \item{\code{KMat}}{A matrix of density values generated from the
  smoothing kernel function.  The matrix has rows equal to the number of
  rows in the dataset and columns equal to the maximum number of support
  sites for any of the samples.  Missing cells indicate that the support
  site corresponding to that column was removed for the sample
  corresponding to that data row.}
  \item{\code{rastersPerVar}}{A data frame showing the number of rasters,
  per level of the spatial variable, for each sample.  The data frame also
  shows the cumulative number of rasters.  If no spatial variable is given
  then this is NULL.}
  \item{\code{nSupportSites}}{The number of support sites per sample.  If
  no spatial variable was given then this is a vector.  If a spatial
  variable is given then this is a data frame showing the number of support
  sites per sample, for each level of the spatial variable.}
  \item{\code{nObs}}{A data frame giving the number of rasters per sample.}
  \item{\code{gT0SupportSites}}{If no spatial variable is provided, then
  this is NULL.  If a spatial variable is given the this is a list of
  vectors, one for each level of the spatial variable, where each vector
  gives the samples numbers with more than one support site for the
  corresponding level of the spatial variable.  If no spatial variable
  is given then this is NULL.}
  \item{\code{nVarLevels}}{The number of levels of the spatial variable.
  If no spatial variable is given then this is NULL.}
  \item{\code{subjectVar}}{A character string specifying the subject
  variable.}
  \item{\code{sampleVar}}{A character string specifying the sample
  variable.}
  \item{\code{spatialVar}}{A character string specifying the spatial
  variable.}
  \item{\code{covariates}}{A concatenated character string of the
  covariate names.}
  \item{\code{covariateTypes}}{A concatenated character string of the
  covariate types (binary, categorical, continuous) corresponding to the
  covariates.}
  \item{\code{covariateLevels}}{A concatenated character string of the
  covariate levels (subject, sample, raster) corresponding to the
  covariates.}
  \item{\code{outcome}}{A character string specifying the name of the
  variable to be modeled.}
  \item{\code{recStructures}}{An indicator where 0 means no structure
  was chosen (if estimmated range=0) and 1 means a structure was chosen.}
}
}
\description{
The \code{createPCData} function generates all the information needed to
fit a process convolution model in a Bayesian setting.
}
\examples{
data("TAMdata")
# The dataset is trimmed only for the speed of the example
TAMdata <- TAMdata[TAMdata$subject < 3, ]
TAMdata <- rScale(TAMdata, subjectVar = 'subject', sampleVar = 'ROI',
                  xCoord = 'x', yCoord = 'y')
rangs <- estRange(TAMdata, outcome = 'X1282.auc', spatialVar = 'TAM',
                  semivEst = 'modulus', logTransform = TRUE)
structs <- chooseStructures(rangs)
PCdat <- createPCData(structs, trimData = FALSE,
                      covariates = c("secondary", "TAM", "secTAM"),
                      covariateTypes = c("binary", "binary", "binary"),
                      covariateLevels = c("sample", "raster", "raster"))
}
